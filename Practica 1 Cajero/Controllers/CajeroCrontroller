package Controllers;

import models.CajeroModel;
import views.CajeroView;

public class CajeroController {
    private CajeroModel model;
    private CajeroView view;
    private boolean sistemaActivo;

    public CajeroController(CajeroModel model, CajeroView view){
        this.model = model;
        this.view = view;
        this.sistemaActivo = true;
    }

    public void iniciarSistema(){
        view.mostrarBienvenida();
        while (sistemaActivo){
            if( autenticarUsuario() ){
                ejecutarMenuPrincipal();
            }else{
                view.mostrarMensaje("Credenciales incorrectas");
            }
        }
        view.mostrarMensaje("Gracias por usar nuestro cajero");
    }
    private boolean autenticarUsuario(){
        String numeroCuenta = view.solicitarNumeroCuenta();
        String pin = view.solicitarPin();
        return model.autenticar(numeroCuenta,pin);
    }

    /**
    - Metodo "metodo principal" para elegir la opcion que se desea ejecutar
    - @author Karina Ramirez
    */

    private void ejecutarMenuPrincipal(){
        boolean sessionActiva = true;
        while (sessionActiva){
            view.mostrarMenuPrincipal(model.getCuentaActual().getTitular());
            int opcion = view.leerOpcion();
            switch (opcion){
                case 1:
                    consultarSaldo();
                break;
                case 2:
                    this.realizarRetiro();
                break;
                case 3:
                    realizarDeposito();
                break;
                case 4:
                    realizarTransferencia();
                break;
                case 5:
                    sesionActiva = false;
                    view.mostrarMensaje("Sesion cerrada");
                    break;
                default:
                    break;
                    view.mostrarErrorOpcionInvalida();
            }
        }
    }

    /**
    - Metodo para realizar las operaciones
    - @author Karina Ramirez
    */

    public void consultarSaldo(){
        double saldo = model.consultarSaldo();
        view.mostrarSaldo(saldo);
    }
    public void realizarRetiro(){
        double cantidad = view.solicitarCantidad("Retirar");
        if( cantidad <= 0 ){
            view.mostrarMensaje("Error en la cantidad");
            return;
        }
        if( model.realizarRetiro(cantidad) ){
            view.mostrarMensaje("Retiro exitoso de "+cantidad);
        }else{
            view.mostrarMensaje("Fondos insuficientes");
        }
    }

    public void realizarDeposito(){
        double cantidad = view.solicitarCantidad("Deposito");
        if( cantidad <= 0){
            view.mostrarMensaje("Error en la cantidad");
            return;
        }
        if( model.realizarDeposito(cantidad) ){
            view.mostrarMensaje("Deposito exitoso por la cantidad "+cantidad);
        }else{
            view.mostrarMensaje("Error al procesar el deposito");
        }
    }

    
    public void realizarTransferencia(){
        String cuentaDestino = view.solicitarCuentaDestino();
        double cantidad = view.solicitarCantidad("Transferir");
           
            if(cantidad <= 0){
                view.mostrarMensaje("Cantidad Erronea, vuelve a intentarlo");
                return;
            }
            if(!model.cuentaExistente(cuentaDestino)){
                view.mostrarErrorCuentaNoExistente();
                return;
            }
            if(model.getCuentaActual().getNumeroCuenta().equals(cuentaDestino)){
                view.mostrarErrorMismaCuenta();
                return;
            }
            if(model.realizarTransferencia(cuentaDestino, cantidad)){
                view.mostrarTransferenciaExitosa(cantidad, cuentaDestino);
            }else{
                view.mostrarErrorSaldoInsuficiente();
            }
    }
}
